{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,WAAW,GAAG,cAAc,CAAoB,aAAa,EAAE;IACnE,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;CAC7D,CAAC,CAAC;AACH,MAAM,CAAN,IAAY,SA4BX;AA5BD,WAAY,SAAS;IAEnB;;KAEC;IACF,qCAAwB,CAAA;IACxB;;OAEG;IACF,qCAAwB,CAAA;IACzB;;OAEG;IACH;;OAEG;IACH;;OAEG;IACF,4CAA+B,CAAA;IAChC;;OAEG;IACF,sCAAyB,CAAA;IACzB;;MAEE;IACF,0CAA6B,CAAA;AAC/B,CAAC,EA5BW,SAAS,KAAT,SAAS,QA4BpB;AAAA,CAAC;AAEF,MAAM,CAAN,IAAY,QASX;AATD,WAAY,QAAQ;IACnB,oCAAwB,CAAA;IACtB,8CAAkC,CAAA;IAClC,kDAAsC,CAAA;IACtC,wCAA4B,CAAA;IAC5B,gDAAoC,CAAA;IACpC,kDAAsC,CAAA;IACtC,kDAAsC,CAAA;IACtC,gDAAoC,CAAA;AACvC,CAAC,EATW,QAAQ,KAAR,QAAQ,QASnB;AAAA,CAAC;AAEF,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IAC1B,mDAAM,CAAA;IACN,iEAAa,CAAA;IACb,qEAAe,CAAA;AAChB,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAAA,CAAC;AACF,MAAM,CAAN,IAAY,aAMX;AAND,WAAY,aAAa;IACxB,iDAAQ,CAAA;IACR,qDAAU,CAAA;IACV,mDAAS,CAAA;IACT,2DAAa,CAAA;IACb,uDAAW,CAAA;AACZ,CAAC,EANW,aAAa,KAAb,aAAa,QAMxB;AAAA,CAAC;AAwJF,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { IdboxPluginPlugin } from './definitions';\n\nconst IdboxPlugin = registerPlugin<IdboxPluginPlugin>('IdboxPlugin', {\n  web: () => import('./web').then(m => new m.IdboxPluginWeb()),\n});\nexport enum ShootMode {\n    \n  /**\n * Sets a mode of scanning a single side identity\n */\n SCAN_1S_ONLY = \"SCAN_1S\",\n /**\n  * Sets a mode of scanning a double side identity\n  */\n  SCAN_2S_ONLY = \"SCAN_2S\",\n /**\n  * Sets a mode of scanning the front side of a double side identity\n  */\n /**\n  * Sets a mode of scanning of the back side of a double side identity\n  */\n /**\n  * Sets a mode of scanning of an additional document\n  */\n  SCAN_1S_OTHER = \"SCAN_1S_OTHER\",\n /**\n  * Sets a mode of capturing a selfie picture\n  */\n  PHOTO_ONLY = \"PHOTO_ONLY\",\n  /**\n  * Sets a mode of scanning an ID \n  */\n  SCAN_ID_ONLY = \"SCAN_ID_ONLY\",\n};\n\nexport enum FontName {\n FONT_DEFAULT = \"Default\",\n   FONT_DEFAULT_BOLD = \"Default_bold\",\n   FONT_SANS_SERIF_REGULAR = \"sans_serif\",\n   FONT_SERIF_REGULAR = \"serif\",\n   FONT_OPEN_SANS_REGULAR = \"open_sans\",\n   FONT_OPEN_SANS_BOLD = \"open_sans_bold\",\n   FONT_AVERTA_REGULAR = \"averta_regular\",\n   FONT_AVERTA_BOLD = \"averta_bold.otf\",\n};\n\nexport enum TransPortMethod {\n ALL= 0,\n WEBSOCKETS= 1,\n LONG_POLLING= 2,\n};\nexport enum TextAlignment {\n LEFT = 0,\n CENTER = 1,\n RIGHT = 2,\n JUSTIFIED = 3,\n NATURAL = 4,\n};\n\n\n/*\n  These are all Builder methods as described interfaces options inside wrapper. \n  So, we have to import them in RN and then we pass the values in form of objects\n  from the RN side and reterive them in the wrapper.\n  As we know these are all builder methods options, so some of them values are set as with ?\n  which indicates they are optional. \n*/\n\ninterface CommonOptions {\n  url: string;\n  hawkId: string;\n  hawkKey: string;\n}\n\nexport interface OnBoardingApiOptions extends CommonOptions {\n  /*\n    Declare all OnBoardingApiOptions for both of the platforms\n    Android: Builders methods as options\n    IOS: Properties as options\n  */\n  requestId: string;\n  port: number;\n  apiPath: string;\n  connectionTimeout?: number;\n  readTimeout?: number;\n  logging?: boolean;\n}\n\nexport interface CameraScreenOptions extends CommonOptions {\n  /*\n    Declare all cameraScreenOptions for both of the platforms\n    Android: Builders methods as options\n    IOS: Properties as options\n  */\n  /* Android only Options */\n  Mode: string;\n  fontName?: string;\n  fontSize?: number;  // ios ( bottomMessageFont ) - android\n  fontColor?: string;\n  autoCaptureTimeOut?: number;  // ios - android\n  backVisibility?: boolean;  // ios - android\n  cornersPathEffect?: boolean;\n  dashPathEffect?: boolean;\n  files?: string[];\n  flashVisibility?: boolean;  // ios ( displayFlash )- android\n  focusContinuePicture?: boolean;\n  footerText?: string | string[];\n  frontFrameBottomText?: string | string[];\n  backFrameBottomText?: string | string[];\n  frontSubHeaderText?: SubHeaderText;\n  backSubHeaderText?: SubHeaderText;\n  headerText?: string | string[];\n  maxFrames?: number;\n  overlayColor?: string;\n  overlayAlpha?: number;\n  roundedFocusFrame?: boolean;\n  shutterButtonLight?: boolean;\n  thumbnailVisibility?: boolean;\n  videoTokenLang?: string;\n  metadata?: string;\n  frontRectangleRotated?: boolean;\n  backRectangleRotated?: boolean;\n\n  /*\n    Declare all PreviewScreenOptions for both of the platforms\n    Android: Builders methods as options\n    IOS: Properties as options\n  */\n  previewHeaderText?: string;\n  previewFrameBottomText?: string; // ios ( bottomMessage ) - android \n  uploadButtonText?: string;  // ios - android\n  retakeButtonText?: string;\n  previewFontName?: string;\n  previewFontSize?: number;\n  previewFontColor?: string;  // ios (preview_bottomColor) - android\n  withLayoutParams?: LayoutParams;\n  apiCallLogging?: boolean;\n  /*\n   Only IOS options\n  */\n  selfieScaleHeightFactor?: number;\n  allowToFinishWithEmptyImageList?: boolean;\n  previewBackgroundColor?: string;  // preview_backgroundColor\n  hasPreview?: boolean;\n  useUploadImageButton?: boolean;\n  bottomColor?: string;\n  previewSliderColor?: string;  // preview_sliderColor\n  previewBottomColor?: string;  // preview_bottomColor\n  previewPromptTextFont?: number;  // preview_promptTextFont\n  allowTerminateOnPressingPreview?: boolean;\n  terminateAddiotionalDocumentsOnFirst?: boolean;\n  displayTopMessages?: boolean;\n  displayBottomMessages?: boolean;\n  takeDoubleSideMessage1?: string;\n  takeDoubleSideMessage2?: string;\n  displayMessages?: boolean;\n  previewBottomMessage?: string;  // preview_bottomMessage\n  previewSliderRect?: CGReatRectangleOptions;  // preview_sliderRect\n  previewPromptTextRect?: CGReatRectangleOptions ;  // preview_promptTextRect\n  previewBoundingRect?: CGReatRectangleOptions;  // preview_boundingRect\n  previewAcceptButtonRect?: CGReatRectangleOptions ;  //  preview_acceptButtonRect\n  smallDocumentRect?: CGReatRectangleOptions;\n  bottomLabelRect?: CGReatRectangleOptions;\n  bottomMessageAlignment?: number;\n  previewPromptTextAlignment?: number;  //  preview_promptTextAlignment\n  \n}\nexport interface CGReatRectangleOptions {\n  xCordinate: number;\n  yCordinate: number;\n  width: number;\n  height: number;\n\n}\nexport interface LayoutParams {\n  width: number;\n  height: number;\n}\nexport interface SubHeaderText {\n  subHeaderText: string | string[];\n  drawable: string;\n}\n\nexport interface VideoSessionOptions extends CommonOptions {\n  /*\n    Declare all VideoSessionOptions for both of the platforms\n    Android: Builders methods as options\n    IOS: Properties as options\n  */\n  tokBoxSessionId: string;\n  tokBoxApiKey: string;\n  tokBoxToken: string;\n\n}\n\nexport interface SignalROptions {\n  /*\n    Declare all SignalROptions for both of the platforms\n    Android: Builders methods as options\n    IOS: Properties as options\n  */\n  url: string;\n  port: number;\n  apiPath: string;\n  useSignalR: boolean;\n  transportMethod?: number;\n}\n\n\nexport * from './definitions';\nexport { IdboxPlugin };\n"]}